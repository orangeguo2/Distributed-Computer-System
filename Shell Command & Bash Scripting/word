#!/bin/sh
# This file implements a memory word consisting a 
# $wordsize bits in bigendian format.

# directory of this script
if [ -z "$dir" ]; then
    dir="$(dirname $0)"
    app="$(basename $0)"
fi

# include word definitions
source "$dir/worddefs"

##
# Gets bit of word.
# @param the word
# @param bit number
# @return bit value as output
getBitOfWord() {
    local index=$((wordtopbit-($2)))
    echo ${1:index:1}
}

##
# Sets bit of word.
# @param word the word
# @param bitno bit number
# @param bitval bit value
# @return word with the bit set as output
setBitOfWord() {
    local index=$((wordtopbit-($2)))
    echo ${1:0:index}$(toBit $3)${1:index+1} 
}

##
# parse word, hex (e.g 0xFAA01) or unsigned decimal
# @param input word, hex, or decimal value
# @return parsed word
parseWord() {
    if [ ${#1} -eq $wordsize ]; then
        word=$1
    else
        if [ "${1:0:2}" = "0x" ]; then
            # parse base 16 to base 2
            word=$(echo "ibase=16;obase=2;${1:2}"|bc)
        else
            #parse base 10 to base 2
            word=$(echo "ibase=10;obase=2;$1"|bc)
        fi
        # pad to wordsize 
        while [ ${#word} -lt $wordsize ]; do
            word="0$word"
        done
    fi
    # trim to wordsize
    echo ${word:0:$wordsize}
}

##
# Output usage message to standard error
usage() {
    echo "usage: $(basename $0) [word [bitno [bitval]]]" 1>&2
    echo "word is a ${wordsize}-bit word" 1>&2
}

word() {
	# dispatch message to word function
	case $# in
	0)  # show usage message if no arguments
	    usage
	    return 0
	    ;;
	1)  # echo word if one argument
	    echo $(parseWord $1)
	    return 0
	    ;;
	2)  # get specified bit of word
	    echo $(getBitOfWord $(parseWord $1) $2)
	    exit 0
	    ;;
	3)  # set specified bit of word to bit
	    echo $(setBitOfWord $(parseWord $1) $2 $3)
	    exit 0
	    ;;
	*)  # show usage message if too many arguments
	    usage
	    exit 1
	esac
}

# process message if called directly
if [ "$app" == "word" ]; then
    echo $(word $*)
fi